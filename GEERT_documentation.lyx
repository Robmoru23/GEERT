#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
GEERT: General EEG experimentation in real-time, an open source software
 for BCI real-time experimental designsMaterial and methods
\end_layout

\begin_layout Section
Hardware
\end_layout

\begin_layout Standard
The following device has been used for the affective BCI:
\end_layout

\begin_layout Enumerate
OpenBCI hardware for the EEG acquisition system.
\end_layout

\begin_layout Subsection
OpenBCI hardware for the EEG acquisition system
\end_layout

\begin_layout Standard
The OpenBCI system is a collection of headsets, boards, sensors, and electrodes
 that allow the research on brain-computer interfacing to purchase high-quality
 equipment at affordable prices.
 In this research the OpenBCI Cyton Board, an Arduino-compatible 8-channel
 neural interface with a 32-bit processor, is used.
 At its core, the OpenBCI Cyton Board implements the PIC32MX250F128B microcontro
ller, giving it lots of local memory and fast processing speeds.
 The board comes pre-flashed with the chipKITâ„¢ bootloader, and the latest
 OpenBCI firmware.
 Data is sampled at 250Hz on each of the eight channels.
\end_layout

\begin_layout Standard
The OpenBCI Cyton Board can be used to sample brain activity (EEG), muscle
 activity (EMG), and heart activity (ECG).
 The board communicates wirelessly to a computer via the OpenBCI USB dongle
 using RFDuino radio modules.
 It can also communicate wirelessly to any mobile device or tablet compatible
 with Bluetooth Low Energy.
 More detailed information can be found at 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://openbci.com/
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
Software
\begin_inset CommandInset label
LatexCommand label
name "sec:Software"

\end_inset


\end_layout

\begin_layout Standard
Wearable devices are tools of particular interest because of the possibilities
 they offer for brain-computer interface (BCI) related research, such as
 motor imagery, emotion estimation, or attention-related studies, which
 could benefit from open source applications.
 Pragmatically, a project of this type requires technical solutions to be
 provided.
 Therefore, GEERT application has been developed to meet the requirements
 of experimental designs.
 All the code has been developed with pure python libraries in an object-oriente
d paradigm.
 The software engineering process was carried out taking into account cohesion
 and coupling for proper modularization.
 This allows GEERT to be modular, scalable, and easy to maintain; in fact,
 this is a key aspect of any scientific tool to allow researchers to make
 modifications and to fulfill the specific requirements of each experimental
 scenario.
\end_layout

\begin_layout Standard
The philosophy of GEERT application is based on a supervised machine learning
 approach and therefore it offers two modes of interaction: 
\end_layout

\begin_layout Itemize
The first allows for real-time acquisition and processing to generate a
 database and build models.
\end_layout

\begin_layout Itemize
The second provides online signal processing using pre-trained models to
 classify brain patterns.
 
\end_layout

\begin_layout Standard
The GEERT application is versatile and easily adaptable to different experimenta
l designs while maintaining high-performance real-time signal processing.
 Aware that pattern recognition is in constant development, this application
 offers the option of importing python external scripts, which must have
 a predefined structure, to include self-developed machine learning methodologie
s.
 Besides, as experimental designs require event synchronization, a TCP/IP
 interface has been provided.
 GEERT is expected to be accessible to the entire scientific community,
 providing a resourceful tool for experimental paradigms of human behavior,
 which encompasses the following functionalities:
\end_layout

\begin_layout Itemize
Real-time acquisition and visualization of physiological signals.
\end_layout

\begin_layout Itemize
Trigger synchronization by a TCP/IP interface that allows start/stop the
 recordings remotely.
\end_layout

\begin_layout Itemize
Recording of data on European Data Format (EDF) for electrophysiological
 signals.
\end_layout

\begin_layout Itemize
Online behavior labeling interface whose labels are synchronized and stored
 in the EDF files.
\end_layout

\begin_layout Itemize
Online signal processing with self-developed methodologies through the possibili
ty of importing external python scripts.
\end_layout

\begin_layout Subsection
GEERT application
\begin_inset CommandInset label
LatexCommand label
name "subsec:GEERT-application"

\end_inset


\end_layout

\begin_layout Description
Title: General EEG experimentation in real-time, an open source software
 for BCI real-time experimental designs
\end_layout

\begin_layout Description
Authors: Mikel Val Calvo
\end_layout

\begin_layout Description
URL: 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://github.com/mikelval82/GEERT
\end_layout

\end_inset


\end_layout

\begin_layout Description
License: GNU General Public License v3.0
\end_layout

\begin_layout Description
DOI: 
\begin_inset CommandInset href
LatexCommand href
name "10.5281/zenodo.3759306"
target "https://doi.org/10.5281/zenodo.3759306"
literal "false"

\end_inset


\end_layout

\begin_layout Standard
This application has been built to further the research on the study of
 EEG signals related to human behavior, with the use of the OpenBCI system.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:GEERT:-General-EEG"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the layout of the GEERT interface.
 Each section has been numbered to properly explain the role of each of
 the components:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement !t
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/mikel/Escritorio/tesis-lyx-bib/figs/Captura de pantalla (4).png
	lyxscale 80
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
GEERT: General EEG experimentation in real-time, an open source software
 for BCI real-time experimental designs.
 A novel open source software application for real-time physiological signals
 acquisition and processing with the OpenBCI.
\begin_inset CommandInset label
LatexCommand label
name "fig:GEERT:-General-EEG"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Set Users: Allows for setting the name of the user file where acquired data
 will be stored.
\end_layout

\begin_layout Enumerate
Load Script: For loading external python scripts developed by users for
 specific experiments.
\end_layout

\begin_layout Enumerate
Connect: Enables the connection and disconnection between the OpenBCI driver
 and GEERT through the corresponding serial device.
\end_layout

\begin_layout Enumerate
Trigger: Starts the trigger server for event synchronization.
\end_layout

\begin_layout Enumerate
Trigger port: A Spin Box to specify the TCP/IP port.
\end_layout

\begin_layout Enumerate
Butter filter order: A Spin Box to set the order of the Butterworth filter.
\end_layout

\begin_layout Enumerate
Windows size (seconds): A Spin Box to set the window size of the Short Term
 View.
\end_layout

\begin_layout Enumerate
Frequency range: Sets the frequency range of the Butterworth filter applied
 to signals.
\end_layout

\begin_layout Enumerate
Filtering method: Determines the online artifact removal (OAR) method to
 be applied.
\end_layout

\begin_layout Enumerate
Start: Starts and stops real-time visualization.
\end_layout

\begin_layout Enumerate
Log viewer: Shows information regarding the internal state of the application.
\end_layout

\begin_layout Enumerate
Long Term View: Allows the visualization in real-time of acquired EEG signals.
 By default 60 seconds time window is shown.
\end_layout

\begin_layout Enumerate
Adjustable Sliding Window: Defines the EEG temporal length and location
 to be shown in the Short Term View.
 Size and location can be interactively changed in real-time even during
 the acquisition.
\end_layout

\begin_layout Enumerate
Short Term View: Allows the visualization in real-time of acquired EEG signals
 falling inside the length and temporal location of the Adjustable Sliding
 Window.
\end_layout

\begin_layout Enumerate
Spectrogram Term View: Allows the visualization of each EEG signals spectrogram
 in real-time.
\end_layout

\begin_layout Subsection
Software design principles
\end_layout

\begin_layout Standard
As mentioned before, the design principles have been followed taking into
 account cohesion and coupling for proper modularization.
 A high-level description is provided that allows us to understand the design
 principles.
 As can be noted in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Flow-diagram."
plural "false"
caps "false"
noprefix "false"

\end_inset

 where the high-level flow diagram scheme is detailed, one of the key points
 of the design is focused on drivers and the data managers.
 Hence, each device has its driver specification which in turn is assigned
 a specific data manager.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement tbph
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/mikel/Escritorio/tesis-lyx-bib/figs/diseÃ±o_software.png
	lyxscale 50
	width 90text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Flow diagram.
 
\begin_inset CommandInset label
LatexCommand label
name "fig:Flow-diagram."

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Itemize
APP: This class serves as the main software module that builds the application.
 It has been designed using PyQt5, a Python binding of the cross-platform
 graphical user interface (GUI) toolkit Qt, implemented as a Python plug-in.
 It launches all the other modules and forks several processes.
 First, the APP main fork.
 Second, a Driver is forked for each device, using the multiprocessing python
 library.
 Finally, it forks a thread for each Data Manager, using the multithreading
 python library.
\end_layout

\begin_layout Itemize
Constants: Sets the whole constants used along with the application.
 Thus facilitating the specification of such general variables in a unique
 module.
 All adjustable parameters are set in this object.
\end_layout

\begin_layout Itemize
Queue: This Queue follows the FIFO rule.
\end_layout

\begin_layout Itemize
Ring Buffer: Stores the last values for each sampled source of information.
 The fixed size is defined by default in the Constants but it can also be
 dynamically modified during the GUI interaction through the 'Window size'
 Spin Box.
 Each time the fixed size is modified, the Ring Buffer is emptied.
\end_layout

\begin_layout Itemize
Driver: Meets the requirements of the real-time acquisition.
 It inherits from multiprocessing python library.
 It offers the interface between the APP and the hardware.
 Inter-process communication is facilitated by Queue.
 Once the fork starts running, iterates acquiring samples that are indefinitely
 queued.
\end_layout

\begin_layout Itemize
Data Manager: It is defined as an interface between the GUI and the Driver
 to properly separate the management of the acquired data.
 It inherits from a multithreading python library.
 It has access to the shared Queue so its role consist on extracting iteratively
 samples from the queue to insert them on a Ring Buffer.
\end_layout

\begin_layout Itemize
GUI Manager: Offers the management of each of the components of the GUI.
\end_layout

\begin_layout Itemize
GUI.ui: Implements the APP graphics.
 It has been designed using QtDesigner, the Qt tool for designing and building
 GUIs.
\end_layout

\begin_layout Itemize
Trigger Server: A TCP/IP server for event synchronization.
 It can receive client connections and handles each request by notifying
 the Slots Manager using a callback function.
\end_layout

\begin_layout Itemize
Slots Manager: The purpose of this module is to bring the application to
 the versatility of adding a set of callbacks that allow synchronizing the
 overall logic.
\end_layout

\begin_layout Itemize
Online Filtering: This module has been implemented as an interface for a
 set of real-time signal processing methods.
\end_layout

\begin_layout Itemize
Modules Loader: The main purpose of this module is to expand the versatility
 of the APP for a wide range of research scenarios.
 It is required that users code the scripts with a predefined structure
 as shown in 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Imported-python-scripts"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 The module will receive a reference to the APP instance so total access
 to the underlying object instances is offered.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Python,basicstyle={\ttfamily},columns=fullflexible,aboveskip=0pt"
inline false
status open

\begin_layout Plain Layout

# -- Add imports -- 
\end_layout

\begin_layout Plain Layout

# import numpy as np
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# -- Class  definition --
\end_layout

\begin_layout Plain Layout

class  pipeline():
\end_layout

\begin_layout Plain Layout

  ''' Predefined structure.'''
\end_layout

\begin_layout Plain Layout

  def __init__(self, app):
\end_layout

\begin_layout Plain Layout

      # -- initialize variables --
\end_layout

\begin_layout Plain Layout

      self.log = app.log
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  def run(self):
\end_layout

\begin_layout Plain Layout

      # -- code desired behaviour --
\end_layout

\begin_layout Plain Layout

      self.log.update_text('Start computing the user module.')
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Imported python scripts required structure.
\begin_inset CommandInset label
LatexCommand label
name "alg:Imported-python-scripts"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Main workflow scheme:
\end_layout

\begin_layout Standard
Once GEERT is launched it can work as follows; Data Manager is threaded
 and starts iteratively trying to extract values from the queue.
 The thread runs a loop that is controlled by a logical condition.
 The iteration process cannot acquire data if the queue is empty.
 Then, the Driver is forked and automatically detects the corresponding
 device to connect with.
 Following, the driver starts iteratively stacking data into the Queue from
 the hardware.
 Both the thread and the fork form a consumer-producer system.
 The Ring Buffer acts as a short term memory.
 The Data Manager fills the Ring Buffer each time a new value is obtained
 from the Queue.
 Once the Ring Buffer is full, it starts overwriting the oldest data and
 so on.
 At this point, two stages are provided:
\end_layout

\begin_layout Itemize
Stage 1: Real-time visualization can be performed by pushing the start button.
 It does not imply user data storage.
 The start button has been designed to test the quality of the signal acquisitio
n.
 The start button state will be changed, so pushing it again will stop visualiza
tion.
 Parameter settings (user filename, filter order, window size, online artifact
 removal method, and so on) should be done on this stage.
\end_layout

\begin_layout Itemize
Stage 2: Once the signals are properly acquired, the Trigger button can
 be pushed that initializes a TCP/IP server.
 The application only stores data in between a pair of client received requests.
 The first request must send a string containing 'start' message to init
 the recording.
 The last request must send a string containing 'stop' message.
 In between, any other string can be sent to allow codification of events
 that will be stored in the EDF file.
 It is expected that one request indicates the start instant for event synchroni
zation while the second, the stop instant.
 For the following, two pairs of events form a trial.
 During the trial duration, the Ring Buffer slots a callback to the Data
 Manager whenever an amount of data equal to the window size is fulfilled,
 that is, a sample is generated.
 At the end of the event, the Data Manager permanently stores acquired samples
 in the users' file with its corresponding metadata.
 Data Manager counts the number of samples generated and the number of trials,
 other metadata values are obtained from the Constants module.
\end_layout

\begin_layout Paragraph
Versatile workflow scheme
\end_layout

\begin_layout Standard
Modules Loader allows the definition of own produced scripts.
 Each imported script must follow a predefined structure.
 The versatility comes due to the reference given to the imported script
 to the main object instance.
 Thus, different scenarios could be provided through this component.
\end_layout

\begin_layout Itemize
Offline scenario: The user could experiment with the main workflow scheme.
 After collecting the required data, a script could be loaded containing
 the coding for an offline analysis, i.e., training a machine learning model
 and store it on disk for future use.
\end_layout

\begin_layout Itemize
Online scenario: The user, could perform online computation thanks to the
 reference given, having access to all the underlying object instances.
 Access to the Data Manager to acquire EEG samples online is therefore provided.
 Moreover, applying OAR methods or even using pre-trained machine-learning
 models for online predictions can be also easily implemented.
\end_layout

\begin_layout Standard
The main highlights of this application consist of its versatility: First,
 modularizing the interaction between the GUI manager and the Driver, which
 allows the embedding of drivers for other acquisition systems.
 Second, the separation between the GUI and the logic, where the former
 allows future modifications and performance of the GUI components, without
 altering the logic, and vice-versa; Finally, the Modules Loader, further
 expands the versatility, by offering the flexibility of incorporating self-deve
loped scripts for specific scenarios and workflow schemes.
 The proposed applications are versatile and easily adaptable to different
 experimental scenarios while maintaining high-performance signal processing
 in real-time.
\end_layout

\end_body
\end_document
